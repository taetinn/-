/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-06-30 07:16:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board.CrossFit;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.UUID;
import vo.BoardVo;
import java.util.ArrayList;
import vo.FileVo;
import dao.FileCfDao;
import dao.BoardCfDao;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import org.apache.commons.fileupload.DiskFileUpload;
import java.io.File;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

public final class WritePro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dao.FileCfDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("vo.FileVo");
    _jspx_imports_classes.add("org.apache.commons.fileupload.DiskFileUpload");
    _jspx_imports_classes.add("vo.BoardVo");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.time.LocalDateTime");
    _jspx_imports_classes.add("java.util.UUID");
    _jspx_imports_classes.add("dao.BoardCfDao");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String path = "C:/Users/SAMSUNG/Desktop/save_path"; //C:\Users\SAMSUNG\Desktop\save_path
	
	LocalDateTime dateTime = LocalDateTime.now(); 
	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d-MMM-uuuu");
	String strDate = dateTime.format(formatter); 
	System.out.println("date : " + strDate);
	
	File dir = new File(path,strDate);
	if(!dir.exists()){
		dir.mkdir();
	}
	
	DiskFileUpload up = new DiskFileUpload();
	
	up.setSizeMax(1024*1024*50);
	up.setSizeThreshold(4096);
	up.setRepositoryPath("C:/devtools/temp");
	
	List<FileItem> list = up.parseRequest(request);
	
	// DB객체 가져오기
		BoardCfDao dao = BoardCfDao.getInstance();
		FileCfDao fileCfDao = FileCfDao.getInstance();
		
		// 첨부파일정보 담을 리스트 준비
		List<FileVo> fileList = new ArrayList<>();
		
		// 새글번호 생성해서 가져오기
		int num = dao.getBoardNum();
		
		BoardVo vo = new BoardVo();
		// vo에 새글번호 설정
		vo.setNum(num);
		
		for (FileItem item : list) {
			if (item.isFormField()) { // 텍스트
				if (item.getFieldName().equals("name")) {
					String name = item.getString("utf-8");
					vo.setName(name);
				} else if (item.getFieldName().equals("title")) {
					vo.setTitle(item.getString("utf-8"));
				} else if (item.getFieldName().equals("content")) {
					vo.setContent(item.getString("utf-8"));
				}
			} else { // 파일
				// 파일이름이 있을때만 파일업로드 및 DB insert
				if (!item.getString("utf-8").equals("")) {
					String filename = item.getName();
					
					System.out.println("filename : "+filename);
					
					// 익스플로러는 파일이름에 경로가 포함되있으므로
					// 순수 파일이름만 부분문자열로 가져오기
					int index = filename.lastIndexOf("\\") + 1;
					filename = filename.substring(index);
					
					// 파일명 중복 피하기 위해 파일이름 앞에 uuid 문자열 붙이기
					UUID uuid = UUID.randomUUID();
					String strUuid = uuid.toString();
					
					// 업로드(생성)할 파일이름
					String uploadFilename = strUuid + "_" + filename;
					
					// 생성할 파일정보 File 객체로 준비
					File file = new File(dir, uploadFilename);
					
					System.out.println("upload Filename : " +file);
					// 해당 경로에 해당 파일명으로 파일 생성(업로드 수행)
					item.write(file);
					///////////////파일 생성 끝////////////////////////
					
					
					///////////////첨부파일 VO 작업시작////////////////////////
					
					// 파일정보 담기위한 AttachfileVo 객체 생성
					FileVo fVo = new FileVo();
					// 게시판 글번호 설정
					fVo.setBno(num);
					// 업로드 경로 설정
					fVo.setUploadpath(dir.getPath());
					
					fVo.setUuid(strUuid);
					fVo.setFilename(filename);
					
					// 파일명 확장자가 이미지면 "I", 아니면 "O"
					String ext = filename.substring(filename.lastIndexOf(".") + 1);
					if (ext.equalsIgnoreCase("png")
							|| ext.equalsIgnoreCase("gif")
							|| ext.equalsIgnoreCase("jpg")
							|| ext.equalsIgnoreCase("jpeg")) {
						fVo.setImage("I"); // Image type
					} else {
						fVo.setImage("O"); // Other type
					}
					
					// 첨부파일 한개 추가
					//attachDao.insert(attachVo);
					fileList.add(fVo);
				} // if
			}
		} // for
		
		//extra value setting	
		vo.setRegDate(LocalDateTime.now());
		vo.setReadcount(0);
		vo.setReRef(num);
		vo.setReLev(0);
		vo.setReSeq(0);
		
		dao.insert(vo);
		fileCfDao.insertCf(fileList);
		
		response.sendRedirect("BoardMain.jsp");

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
