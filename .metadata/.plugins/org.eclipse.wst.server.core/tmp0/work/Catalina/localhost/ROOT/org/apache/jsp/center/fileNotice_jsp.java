/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-06-30 01:44:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.center;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import exam.domain.BoardVo;
import java.util.List;
import exam.dao.BoardDao;

public final class fileNotice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.time.LocalDateTime");
    _jspx_imports_classes.add("exam.domain.BoardVo");
    _jspx_imports_classes.add("exam.dao.BoardDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/head.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");

	//검색어 관련 파라미터 가져오기. 없으면 null 리턴
	String category = request.getParameter("category"); // 검색유형
	String search = request.getParameter("search"); // 검색어
	
	category = (category == null) ? "" : category;
	search = (search == null) ? "" : search;
	
	System.out.println("category = " + category);
	System.out.println("search = " + search);

	// DB객체 가져오기
	BoardDao dao = BoardDao.getInstance();
	// 전체 글갯수
	int totalCount = dao.getTotalCount(category, search);
	
	// 사용자가 요청한 페이지번호 파라미터 가져오기
	String strPageNum = request.getParameter("pageNum");
	if (strPageNum == null || strPageNum.equals("")) {
		strPageNum = "1";
	}
	//strPageNum = (strPageNum == null) ? "1" : strPageNum;
	
	// 문자열 페이지번호를 숫자로 변환
	int pageNum = Integer.parseInt(strPageNum);
	
	
	
	
	
	// 한 페이지에 15개씩 가져오기
	int pageSize = 15;
	// 시작행 인덱스번호 구하기(수식)
	int startRow = (pageNum-1) * pageSize;
		
	// 원하는 페이지의 글을 가져오는 메소드
	List<BoardVo> list = null;
	if (totalCount > 0) {
		list = dao.getBoards(startRow, pageSize, category, search);
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"wrap\">\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/top.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"clear\"></div>\r\n");
      out.write("\t<div id=\"sub_img_center\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"clear\"></div>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/board_submenu.jsp", out, false);
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<article>\r\n");
      out.write("\t\t\r\n");
      out.write("\t<h1>파일 게시판 [전체글갯수: ");
      out.print(totalCount );
      out.write("]</h1>\r\n");
      out.write("\t\t\r\n");
      out.write("\t<table id=\"notice\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th scope=\"col\" class=\"tno\">no.</th>\r\n");
      out.write("\t\t\t<th scope=\"col\" class=\"ttitle\">title</th>\r\n");
      out.write("\t\t\t<th scope=\"col\" class=\"twrite\">writer</th>\r\n");
      out.write("\t\t\t<th scope=\"col\" class=\"tdate\">date</th>\r\n");
      out.write("\t\t\t<th scope=\"col\" class=\"tread\">read</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

		if (totalCount > 0) {
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");
			
			for (BoardVo vo : list) {
				LocalDateTime dateTime = vo.getRegDate();
				String strRegDate = dateTime.format(formatter);
				
      out.write("\r\n");
      out.write("\t\t\t\t<tr onclick=\"location.href='fileContent.jsp?num=");
      out.print(vo.getNum() );
      out.write("&pageNum=");
      out.print(pageNum );
      out.write("'\">\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(vo.getNum() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td class=\"left\">\r\n");
      out.write("\t\t\t\t\t\t");

						if (vo.getReLev() > 0) {
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<img src=\"/images/center/level.gif\" width=\"");
      out.print(vo.getReLev() * 10 );
      out.write("\" height=\"13\">\r\n");
      out.write("\t\t\t\t\t\t\t<img src=\"/images/center/re.gif\">\r\n");
      out.write("\t\t\t\t\t\t\t");

						}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(vo.getSubject() );
      out.write("\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(vo.getName() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(strRegDate );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(vo.getReadcount() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

			}
		} else {
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"5\">게시판 글없음</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

		}
		
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"table_search\">\r\n");
      out.write("\t\t<form action=\"notice.jsp\" method=\"get\">\r\n");
      out.write("\t\t<select name=\"category\">\r\n");
      out.write("\t\t\t<option value=\"content\" ");
 if (category.equals("content")) { 
      out.write("selected");
 } 
      out.write(">글내용</option>\r\n");
      out.write("\t\t\t<option value=\"subject\" ");
 if (category.equals("subject")) { 
      out.write("selected");
 } 
      out.write(">글제목</option>\r\n");
      out.write("\t\t\t<option value=\"name\" ");
 if (category.equals("name")) { 
      out.write("selected");
 } 
      out.write(">작성자</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t<input type=\"text\" name=\"search\" value=\"");
      out.print(search );
      out.write("\" class=\"input_box\"> \r\n");
      out.write("\t\t<input type=\"submit\" value=\"검색\" class=\"btn\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");

		// 세션 가져오기
		String id = (String) session.getAttribute("id");
		// 세션값이 있으면 글쓰기 버튼이 보이게 설정
		if (id != null) {
			
      out.write("\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"글쓰기\" class=\"btn\" onclick=\"location.href='fileWriteForm.jsp?pageNum=");
      out.print(pageNum );
      out.write("'\">\r\n");
      out.write("\t\t\t");

		}
		
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"clear\"></div>\r\n");
      out.write("\t<div id=\"page_control\">\r\n");
      out.write("\t");

		if (totalCount > 0) {
			// 총 페이지 수 구하기
			// 글50개. 한화면에보여줄글 10개 -> 50/10 = 5페이지
			// 글55개. 한화면에보여줄글 10개 -> 55/10 = 5 + 1페이지(나머지 있으면) -> 6페이지
			//int pageCount = totalCount / pageSize + (totalCount % pageSize == 0 ? 0 : 1);
			int pageCount = totalCount / pageSize;
			if (totalCount % pageSize > 0) {
				pageCount += 1;
			}
			
			// 화면에 보여줄 페이지번호의 갯수 설정
			int pageBlock = 10;
			
			// 페이지블록의 시작페이지 구하기!
			// 1~10   11~20   21~30
			
			//  1~10 ->  1
			// 11~20 -> 11
			// 21~30 -> 21
			// 31~40
			
			// 페이지 블록의 시작페이지
			int startPage = ((pageNum / pageBlock) - (pageNum % pageBlock == 0 ? 1 : 0)) * pageBlock + 1;
			// 페이지 블록의 끝페이지
			int endPage = startPage + pageBlock - 1;
			if (endPage > pageCount) {
				endPage = pageCount;
			}
			
			// [이전]
			if (startPage > pageBlock) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"notice.jsp?pageNum=");
      out.print(startPage - pageBlock );
      out.write("\">[이전]</a>\r\n");
      out.write("\t\t\t\t");

			}
					
			
			// 페이지블록 내에서의 시작페이지부터 끝페이지까지 번호출력
			for (int i=startPage; i<=endPage; i++) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"notice.jsp?pageNum=");
      out.print(i );
      out.write("\">\r\n");
      out.write("\t\t\t\t");

				if (i == pageNum) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<span style=\"font-weight: bold; color: red;\">[");
      out.print(i );
      out.write("]</span>\r\n");
      out.write("\t\t\t\t\t");

				} else {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t[");
      out.print(i );
      out.write("]\r\n");
      out.write("\t\t\t\t\t");

				}
				
      out.write("\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t");

			}
			
			// [다음]
			if (endPage < pageCount) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"notice.jsp?pageNum=");
      out.print(startPage + pageBlock );
      out.write("\">[다음]</a>\r\n");
      out.write("\t\t\t\t");

			}
		} // if
	
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</article>\r\n");
      out.write("    \r\n");
      out.write("\t<div class=\"clear\"></div>\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/bottom.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>   \r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
